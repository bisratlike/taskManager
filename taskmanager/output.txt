--- File: app/layout.tsx ---
// app/layout.tsx
import { MantineProvider, AppShell } from "@mantine/core";
import { Notifications } from "@mantine/notifications";
import '@mantine/core/styles.css';
import '@mantine/notifications/styles.css';
import 'normalize.css/normalize.css';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <MantineProvider>
          <AppShell>
            {children}
          </AppShell>
        </MantineProvider>
      </body>
    </html>
  );
}

--- File: app/page.tsx ---
// app/page.tsx
"use client";
import Header from '../components/Header';
import TaskPage from './tasks/page';

export default function Home() {
  return (
    <div style={{ minHeight: '100vh', backgroundColor: '#f8f9fa' }}>
      <Header />
      <main style={{ padding: '1rem', maxWidth: '1200px', margin: '0 auto' }}>
        <TaskPage />
      </main>
    </div>
  );
}

--- File: app/tasks/page.tsx ---
// app/tasks/page.tsx
"use client";
import { useEffect, useReducer } from 'react';
import { useDisclosure } from '@mantine/hooks';
import { notifications } from '@mantine/notifications';
import { Task,} from './components/types';
import { createTask, updateTask, deleteTask, getTasks } from './components/actions';
import TaskList from './components/taskList';
import TaskControls from './components/taskControl';
import AddModal from './components/addModal';

type State = {
  tasks: Task[];
  past: Task[][];
  future: Task[][];
};

type Action =
  | { type: 'SET_TASKS'; payload: Task[] }
  | { type: 'ADD_TASK'; payload: Task }
  | { type: 'UPDATE_TASK'; payload: Task }
  | { type: 'DELETE_TASK'; payload: number }
  | { type: 'UNDO' }
  | { type: 'REDO' };

const localStorageKey = 'taskManagerState';

// Custom replacer/reviver for Date handling
// app/tasks/page.tsx
const replacer = (key: string, value: any) => {
  if (value instanceof Date) return value.toISOString(); // Return ISO string instead of custom format
  return value;
};

const reviver = (key: string, value: any) => {
  if (typeof value === 'string' && isISO8601(value)) {
    return new Date(value);
  }
  return value;
};


function isISO8601(dateString: string) {
  return /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(dateString);
}

function reducer(state: State, action: Action): State {
  let newState = { ...state };

  switch (action.type) {
    case 'SET_TASKS':
      newState = { 
        tasks: action.payload.filter(task => 
          task !== null && task.title !== undefined
        ), 
        past: [], 
        future: [] 
      };
      break;
    case 'UPDATE_TASK':
      newState = {
        tasks: state.tasks.map(task => 
          task.id === action.payload.id ? action.payload : task
        ),
        past: [...state.past, state.tasks],
        future: []
      };
      break;
    case 'DELETE_TASK':
      newState = {
        tasks: state.tasks.filter(task => task.id !== action.payload),
        past: [...state.past, state.tasks],
        future: []
      };
      break;
    case 'UNDO':
      if (state.past.length === 0) return state;
      newState = {
        tasks: state.past[state.past.length - 1],
        past: state.past.slice(0, -1),
        future: [state.tasks, ...state.future]
      };
      break;
    case 'REDO':
      if (state.future.length === 0) return state;
      newState = {
        tasks: state.future[0],
        past: [...state.past, state.tasks],
        future: state.future.slice(1)
      };
      break;
    default:
      return state;
  }

  // Save to localStorage on every state change
  if (typeof window !== 'undefined') {
    localStorage.setItem(localStorageKey, JSON.stringify(newState, replacer));
  }
  
  return newState;
}

function getInitialState(): State {
  if (typeof window === 'undefined') return { tasks: [], past: [], future: [] };

  const saved = localStorage.getItem(localStorageKey);
  return saved ? JSON.parse(saved, reviver) : { tasks: [], past: [], future: [] };
}

export default function TaskPage() {
  const [state, dispatch] = useReducer(reducer, getInitialState());
  const [opened, { open, close }] = useDisclosure(false);

  
  useEffect(() => {
    const syncWithServer = async () => {
      try {
        const serverTasks = await getTasks();
        if (serverTasks) {
          dispatch({ type: 'SET_TASKS', payload: serverTasks });
        }
      } catch (error) {
        notifications.show({
          title: 'Sync Error',
          message: 'Failed to sync with server. Using local data.',
          color: 'yellow'
        });
      }
    };
    syncWithServer();
  }, []);

  const handleAdd = async (taskData: Omit<Task, 'id'>) => {
    try {
      const newTask = await createTask(taskData);
      dispatch({ type: 'ADD_TASK', payload: newTask });
      notifications.show({ title: 'Success', message: 'Task created!', color: 'teal' });
    } catch (error) {
      notifications.show({
        title: 'Error',
        message: 'Failed to create task',
        color: 'red'
      });
    }
  };

  const handleUpdate = async (task: Task) => {
    try {
      await updateTask(task);
      dispatch({ type: 'UPDATE_TASK', payload: task });
      notifications.show({ title: 'Success', message: 'Task updated!', color: 'teal' });
    } catch (error) {
      notifications.show({
        title: 'Error',
        message: 'Failed to update task',
        color: 'red'
      });
    }
  };

  const handleDelete = async (id: number) => {
    try {
      await deleteTask(id);
      dispatch({ type: 'DELETE_TASK', payload: id });
      notifications.show({ title: 'Success', message: 'Task deleted!', color: 'teal' });
    } catch (error) {
      notifications.show({
        title: 'Error',
        message: 'Failed to delete task',
        color: 'red'
      });
    }
  };

  return (
    <>
      <TaskControls 
        onAdd={open}
        onUndo={() => dispatch({ type: 'UNDO' })}
        onRedo={() => dispatch({ type: 'REDO' })}
        canUndo={state.past.length > 0}
        canRedo={state.future.length > 0}
      />

      <TaskList
        tasks={state.tasks}
        onEdit={handleUpdate}
        onDelete={handleDelete}
      />

      <AddModal
        opened={opened}
        onClose={close}
        onSubmit={handleAdd}
      />
    </>
  );
}

--- File: app/tasks/components/addModal.tsx ---
// app/tasks/components/addModal.tsx
"use client";
import { Modal, Button, TextInput, Select, DatePicker } from '@mantine/core';
import { useForm } from '@mantine/form';
import { Task, TaskStatus } from './types';
import { DateInput } from '@mantine/dates';

import { showNotification } from '@mantine/notifications';

type AddModalProps = {
  opened: boolean;
  onClose: () => void;
  onSubmit: (taskData: Omit<Task, 'id'>) => void;
};

const AddModal: React.FC<AddModalProps> = ({ opened, onClose, onSubmit }) => {
  const form = useForm({
    initialValues: {
      title: '',
      description: '',
      status: TaskStatus.Pending,
      dueDate: null as Date | null,
    },
    validate: {
      title: (value) => (value.trim() ? null : 'Title is required'),
      dueDate: (value) => (value ? null : 'Due date is required'),
    },
  });

// app/tasks/components/addModal.tsx
const handleSubmit = (values: typeof form.values) => {
  try {
    if (!values.dueDate) {
      throw new Error("Due date is required");
    }
    
    onSubmit({
      ...values,
      dueDate: values.dueDate instanceof Date 
        ? values.dueDate 
        : new Date(values.dueDate)
    });
    
    form.reset();
    onClose();
  } catch (error) {
    console.error("Submission error:", error);
    showNotification({
      title: 'Submission error',
      message: error.message,
      color: 'red',
    });
  }
};
  return (
    <Modal opened={opened} onClose={onClose} title="Add New Task">
      <form onSubmit={form.onSubmit(handleSubmit)}>
        <TextInput
          label="Title"
          withAsterisk
          {...form.getInputProps('title')}
          mb="sm"
        />
        
        <TextInput
          label="Description"
          {...form.getInputProps('description')}
          mb="sm"
        />
        
        <Select
          label="Status"
          data={[
            { value: TaskStatus.Pending, label: 'Pending' },
            { value: TaskStatus.Completed, label: 'Completed' },
            { value: TaskStatus.InProgress, label: 'In Progress' },
          ]}
          {...form.getInputProps('status')}
          mb="sm"
        />
        
        <DateInput
  label="Due Date"
  {...form.getInputProps('dueDate')}
  mb="sm"
/>
        
        <Button type="submit" fullWidth>
          Create Task
        </Button>
      </form>
    </Modal>
  );
};

export default AddModal;

--- File: app/tasks/components/editModal.tsx ---
// app/tasks/components/editModal.tsx
import { Modal, TextInput, Select, DatePicker,Button } from '@mantine/core';
import { useForm } from '@mantine/form';
import { Task,TaskStatus } from './types';

import { useEffect } from 'react';
export default function EditModal({ task, opened, onClose, onSubmit }: {
  task: Task | null;
  opened: boolean;
  onClose: () => void;
  onSubmit: (task: Task) => void;
}) {
  const form = useForm({
    initialValues: {
      title: '',
      description: '',
      status: TaskStatus.Pending,
      dueDate: new Date(),
    },
    validate: {
      title: (value) => value.trim().length > 0 ? null : 'Title is required',
      dueDate: (value) => value ? null : 'Due date is required',
    },
  });

  useEffect(() => {
    if (task) {
      form.setValues({
        title: task.title,
        description: task.description,
        status: task.status,
        dueDate: new Date(task.dueDate)
      });
    }
  }, [task]);

  return (
    <Modal opened={opened} onClose={onClose} title="Edit Task">
      <form onSubmit={form.onSubmit((values) => onSubmit({
        ...task!,
        ...values,
        dueDate: values.dueDate
      }))}>
        <TextInput
          label="Title"
          {...form.getInputProps('title')}
          required
          mb="sm"
        />
        
        <TextInput
          label="Description"
          {...form.getInputProps('description')}
          mb="sm"
        />
        
        <Select
          label="Status"
          data={Object.values(TaskStatus).map((status) => ({
            value: status,
            label: status.replace('_', ' ')
          }))}
          {...form.getInputProps('status')}
          mb="sm"
        />
        
        <DatePicker
          label="Due Date"
          {...form.getInputProps('dueDate')}
          required
          mb="md"
        />
        
        <Button type="submit" fullWidth>
          Save Changes
        </Button>
      </form>
    </Modal>
  );
}

--- File: app/tasks/components/taskControl.tsx ---
import { Group, Button } from '@mantine/core';
import { IconPlus, IconArrowBack, IconArrowForward } from '@tabler/icons-react';

export default function TaskControls({ 
  onAdd, 
  onUndo, 
  onRedo, 
  canUndo, 
  canRedo 
}: {
  onAdd: () => void;
  onUndo: () => void;
  onRedo: () => void;
  canUndo: boolean;
  canRedo: boolean;
}) {
  return (
    <Group mb="md">
      <Button 
  leftSection={<IconPlus size={16} />}
  onClick={onAdd}
  variant="filled"
>
  New Task
</Button>
      
      <Button
        onClick={onUndo}
        disabled={!canUndo}
        variant="outline"
      >
        <IconArrowBack size={16} />
        Undo
      </Button>
      
      <Button
        onClick={onRedo}
        disabled={!canRedo}
        variant="outline"
      >
        <IconArrowForward size={16} />
        Redo
      </Button>
    </Group>
  );
}

--- File: app/tasks/components/types.ts ---
// app/tasks/components/types.ts
export enum TaskStatus {
  Pending = "pending",
  Completed = "completed",
  InProgress = "in_progress"
}

export type Task = {
  id: number;
  title: string;
  description: string;
  status: TaskStatus; // Use enum here
  dueDate: Date;
};

--- File: app/tasks/components/actions.ts ---
// app/tasks/components/actions.ts
"use server";
import { db } from "@/drizzle/db";
import { tasks } from "@/drizzle/schema";
import { eq, asc } from "drizzle-orm";
import { Task} from './types';

export async function createTask(taskData: Omit<Task, 'id'>) {
  try {
      const dueDate = taskData.dueDate instanceof Date 
          ? taskData.dueDate 
          : new Date(taskData.dueDate);
      console.log("Task Data:", taskData);
      console.log("Due Date:", dueDate);

      const [newTask] = await db.insert(tasks).values({
          title: taskData.title,
          description: taskData.description,
          dueDate: dueDate,
          status: taskData.status,
      }).returning();

      console.log("New Task:", newTask);
      return newTask;
  } catch (error) {
      console.error("Error creating task:", error);
      throw new Error("Failed to create task");
  }
}

export async function updateTask(task: Task) {
  try {
    const [updatedTask] = await db.update(tasks)
      .set({
        title: task.title,
        description: task.description,
        dueDate: task.dueDate,
        status: task.status,
      })
      .where(eq(tasks.id, task.id))
      .returning();

    return updatedTask;
  } catch (error) {
    console.error("Error updating task:", error);
    throw new Error("Failed to update task");
  }
}



export async function deleteTask(id: number) {
    try{

        const [deletedTask]= await db.delete(tasks).where(eq(tasks.id, id)).returning();
        return deletedTask;

    }catch(error){

        console.log("error on deleting task",error)
    }
}


// app/tasks/components/actions.ts
export async function getTasks() {
    try {
      const allTasks = await db.select().from(tasks).orderBy(asc(tasks.id));
      return allTasks || [];
    } catch (error) {
      console.log("error on getting tasks", error);
      return [];
    }
  }

--- File: app/tasks/components/taskList.tsx ---
// app/tasks/components/taskList.tsx
import { Card, Text, Group, ActionIcon, Badge, Stack } from '@mantine/core';
import { IconEdit, IconTrash } from '@tabler/icons-react';
import EditModal from './editModal';
import { useState } from 'react';
import { Task,TaskStatus  } from './types';


export default function TaskList({ tasks, onEdit, onDelete }: {
  tasks: Task[];
  onEdit: (task: Task) => void;
  onDelete: (id: number) => void;
}) {
  const [editingTask, setEditingTask] = useState<Task | null>(null);
  return (
    <Stack spacing="sm">
      {tasks
        .filter(task => task !== null) 
        .map((task) => (
          <Card key={task.id} shadow="sm" p="lg" radius="md" withBorder>
          
          <Group position="apart" mb="xs">
            <Text weight={500}>{task.title}</Text>
            <Group spacing="xs">
              <ActionIcon
                variant="light"
                color="blue"
                onClick={() => setEditingTask(task)}
              >
                <IconEdit size={18} />
              </ActionIcon>
              <ActionIcon
                variant="light"
                color="red"
                onClick={() => onDelete(task.id)}
              >
                <IconTrash size={18} />
              </ActionIcon>
            </Group>
          </Group>
          
          <Text size="sm" color="dimmed" mb="xs">
            {task.description}
          </Text>
          
          <Group spacing="xl">
            <Badge
              variant="filled"
              color={
                task.status === TaskStatus.Completed ? 'teal' :
                task.status === TaskStatus.InProgress ? 'blue' : 'yellow'
              }
            >
              {task.status.replace('_', ' ')}
            </Badge>
            <Text size="sm">
              Due: {task.dueDate.toLocaleDateString()}
            </Text>
          </Group>
        </Card>
      ))}

      <EditModal
        task={editingTask}
        opened={!!editingTask}
        onClose={() => setEditingTask(null)}
        onSubmit={onEdit}
      />
    </Stack>
  );
}

--- File: components/Header.tsx ---
// components/Header.tsx
import { Text } from '@mantine/core';

export default function Header() {
  return (
    <div style={{ 
      backgroundColor: '#6c5ce7', 
      padding: '1rem',
      width: '100%',
      textAlign: 'center'
    }}>
      <Text c="white" fw={700} size="xl">
        Task Manager
      </Text>
    </div>
  );
}

--- File: drizzle/db.ts ---
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";
const client = postgres(process.env.DATABASE_URL!);
export const db = drizzle(client, { schema });

--- File: drizzle/schema.ts ---
import {pgTable , serial , text ,timestamp ,pgEnum} from "drizzle-orm/pg-core";
export const taskStatus = pgEnum("task_status",["pending","completed","in_progress"]);
export const tasks = pgTable("tasks",{
    id:serial("id").primaryKey(),
    title:text("title"),
    description:text("description"),
    status:taskStatus("status").default("pending"),
    dueDate:timestamp("due_date"),
    createdAt:timestamp("created_at").defaultNow(),
    updatedAt:timestamp("updated_at").defaultNow()
})

